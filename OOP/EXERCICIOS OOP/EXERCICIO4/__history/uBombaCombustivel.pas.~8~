unit uBombaCombustivel;

interface

Uses SysUtils;

//Nessa tela os tratamentos utilizados são dos field da clase (Parametros)
//Criar primeiro todos os processos da classe para depois ir para o formulário
type
  TBombaCombustivel = class
    private
      FQtdTanquePosto:  Double;
      FValorLitro:      Double;
      FTipoCombustivel: String;

      procedure SetQtdTanquePosto(const pValue: Double);
      procedure SetTipoCOmbustivel(const pValue: String);
      procedure SetValorLitro(const pValue: Double);

      function GetQtdTanquePosto: Double;
      function GetTipoCombustivel: String;
      function GetValorLitro: Double;

    public
      procedure AbastecerPorValor(const pValorAbastecer: Double);
      procedure AbastecerPorLitro(const pLitros: Double);
      procedure AlterarValor(const pValorAbastecerAterado: Double);
      procedure AlterarTipoCombustivel(const pTipoCombustivel: String);
      procedure AlterarQTDCombustivel(const pQTDCombust: Double);

      property TipoCombustivel : String read GetTipoCombustivel write SetTipoCombustivel;
      property ValorLitro      : Double read GetValorLitro      write SetValorLitro;
      property QtdTanquePosto  : Double read GetQtdTanquePosto  write SetQtdTanquePosto;
    end;


implementation

{ TBombaCombustivel }

procedure TBombaCombustivel.AbastecerPorLitro(const pLitros: Double);
begin
  if pLitros > FQtdTanquePosto then
    raise Exception.Create('Quantidade Indisponivel.');

  FQtdTanquePosto := FQtdTanquePosto - pLitros;
end;

procedure TBombaCombustivel.AbastecerPorValor(const pValorAbastecer: Double);
var
  xQtd: Double;
begin
  xQtd := pValorAbastecer / FValorLitro;

  if xQtd > FQtdTanquePosto then
    raise Exception.Create('Quantidade Indisponivel.');

  FQtdTanquePosto := FQtdTanquePosto - xQtd;
end;

procedure TBombaCombustivel.AlterarTipoCombustivel(const pTipoCombustivel: String);
begin
  FTipoCombustivel := pTipoCombustivel;
end;

procedure TBombaCombustivel.AlterarQTDCombustivel(const pQTDCombust: Double);
begin
  FQtdTanquePosto := FQtdTanquePosto - pQTDCombust;
end;

procedure TBombaCombustivel.AlterarValor(const pValorAbastecerAterado: Double);
begin
  FValorLitro := pValorAbastecerAterado;
end;

function TBombaCombustivel.GetQtdTanquePosto: Double;
begin
  Result := FQtdTanquePosto;
end;

function TBombaCombustivel.GetTipoCombustivel: String;
begin
  Result := FTipoCombustivel;
end;

function TBombaCombustivel.GetValorLitro: Double;
begin
  Result := FValorLitro;
end;

procedure TBombaCombustivel.SetQtdTanquePosto(const pValue: Double);
begin
  FQtdTanquePosto := pValue;
end;

procedure TBombaCombustivel.SetTipoCombustivel(const pValue: String);
begin
  FTipoCombustivel := pValue;
end;

procedure TBombaCombustivel.SetValorLitro(const pValue: Double);
begin
  FValorLitro := pValue;
end;

end.
